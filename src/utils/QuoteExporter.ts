// Export utilities for courier quotes and comparison data

import type { CourierQuote } from '@/data/courierData'
import type { ShippingRequest } from '@/data/pricingCalculator'

export interface ExportData {
  request: ShippingRequest
  quotes: CourierQuote[]
  generatedAt: string
  totalQuotes: number
  priceRange: { min: number; max: number }
  averagePrice: number
  recommendedQuote?: CourierQuote
}

export class QuoteExporter {
  static formatCurrency(amount: number): string {
    return new Intl.NumberFormat('en-IN', {
      style: 'currency',
      currency: 'INR',
      minimumFractionDigits: 0,
      maximumFractionDigits: 2
    }).format(amount)
  }

  static generateExportData(request: ShippingRequest, quotes: CourierQuote[]): ExportData {
    const prices = quotes.map(q => q.pricing.totalPrice)
    const priceRange = {
      min: Math.min(...prices),
      max: Math.max(...prices)
    }
    const averagePrice = prices.reduce((sum, price) => sum + price, 0) / prices.length
    const recommendedQuote = quotes.find(q => q.isRecommended)

    return {
      request,
      quotes,
      generatedAt: new Date().toISOString(),
      totalQuotes: quotes.length,
      priceRange,
      averagePrice,
      recommendedQuote
    }
  }

  static exportToCSV(data: ExportData): string {
    const headers = [
      'Courier Service',
      'Service Type',
      'Total Price (INR)',
      'Base Price (INR)',
      'Delivery Days (Min)',
      'Delivery Days (Max)',
      'Rating',
      'Confidence (%)',
      'Cutoff Time',
      'Working Days Only',
      'Recommended',
      'Features'
    ]

    const rows = data.quotes.map(quote => [
      quote.courierService.displayName,
      quote.serviceType.displayName,
      quote.pricing.totalPrice.toString(),
      quote.pricing.basePrice.toString(),
      quote.delivery.minDays.toString(),
      quote.delivery.maxDays.toString(),
      quote.courierService.rating.toString(),
      quote.confidence.toString(),
      quote.delivery.cutoffTime,
      quote.delivery.workingDaysOnly ? 'Yes' : 'No',
      quote.isRecommended ? 'Yes' : 'No',
      quote.features.join('; ')
    ])

    const csvContent = [
      headers.join(','),
      ...rows.map(row => row.map(cell => `"${cell}"`).join(','))
    ].join('\n')

    return csvContent
  }

  static exportToPDF(data: ExportData): string {
    // Simple text-based PDF content (would need a proper PDF library for production)
    const content = `
SHIP SMART - COURIER QUOTES COMPARISON
Generated: ${new Date(data.generatedAt).toLocaleString()}

SHIPMENT DETAILS:
From: ${data.request.fromCity}, ${data.request.fromState}
To: ${data.request.toCity}, ${data.request.toState}
Weight: ${data.request.weight} kg
Delivery Type: ${data.request.deliveryType}
Declared Value: ${this.formatCurrency(data.request.declaredValue)}

QUOTE SUMMARY:
Total Quotes: ${data.totalQuotes}
Price Range: ${this.formatCurrency(data.priceRange.min)} - ${this.formatCurrency(data.priceRange.max)}
Average Price: ${this.formatCurrency(data.averagePrice)}
Potential Savings: ${this.formatCurrency(data.priceRange.max - data.priceRange.min)}

DETAILED QUOTES:
${data.quotes.map((quote, index) => `
${index + 1}. ${quote.courierService.displayName} - ${quote.serviceType.displayName}
   Price: ${this.formatCurrency(quote.pricing.totalPrice)} ${quote.isRecommended ? '(RECOMMENDED)' : ''}
   Delivery: ${quote.delivery.minDays}-${quote.delivery.maxDays} days
   Rating: ${quote.courierService.rating}/5.0
   Features: ${quote.features.join(', ')}
`).join('\n')}

${data.recommendedQuote ? `
RECOMMENDED SERVICE:
${data.recommendedQuote.courierService.displayName} - ${data.recommendedQuote.serviceType.displayName}
Price: ${this.formatCurrency(data.recommendedQuote.pricing.totalPrice)}
Why recommended: Best combination of price, reliability, and delivery speed
` : ''}

Generated by Ship Smart - Your Smart Shipping Solution
`
    return content
  }

  static downloadFile(content: string, filename: string, type: string): void {
    const blob = new Blob([content], { type })
    const url = URL.createObjectURL(blob)
    const link = document.createElement('a')
    link.href = url
    link.download = filename
    document.body.appendChild(link)
    link.click()
    document.body.removeChild(link)
    URL.revokeObjectURL(url)
  }

  static exportQuotesAsCSV(request: ShippingRequest, quotes: CourierQuote[]): void {
    const data = this.generateExportData(request, quotes)
    const csv = this.exportToCSV(data)
    const filename = `ship-smart-quotes-${data.request.fromCity}-${data.request.toCity}-${new Date().toISOString().split('T')[0]}.csv`
    this.downloadFile(csv, filename, 'text/csv')
  }

  static exportQuotesAsPDF(request: ShippingRequest, quotes: CourierQuote[]): void {
    const data = this.generateExportData(request, quotes)
    const pdf = this.exportToPDF(data)
    const filename = `ship-smart-quotes-${data.request.fromCity}-${data.request.toCity}-${new Date().toISOString().split('T')[0]}.txt`
    this.downloadFile(pdf, filename, 'text/plain')
  }

  static copyQuotesToClipboard(request: ShippingRequest, quotes: CourierQuote[]): Promise<void> {
    const data = this.generateExportData(request, quotes)
    const text = `Ship Smart Quotes - ${data.request.fromCity} to ${data.request.toCity}\n\n` +
      quotes.map(quote => 
        `${quote.courierService.displayName}: ${this.formatCurrency(quote.pricing.totalPrice)} (${quote.delivery.minDays}-${quote.delivery.maxDays} days)`
      ).join('\n') +
      `\n\nRecommended: ${data.recommendedQuote?.courierService.displayName || 'None'}\n` +
      `Generated: ${new Date().toLocaleString()}`
    
    return navigator.clipboard.writeText(text)
  }

  static generateShareableLink(request: ShippingRequest, quotes: CourierQuote[]): string {
    // In a real application, this would generate a shareable link
    // For now, we'll create a data URL that can be shared
    const data = this.generateExportData(request, quotes)
    const params = new URLSearchParams({
      from: `${data.request.fromCity},${data.request.fromState}`,
      to: `${data.request.toCity},${data.request.toState}`,
      weight: data.request.weight.toString(),
      type: data.request.deliveryType,
      quotes: data.totalQuotes.toString(),
      price: this.formatCurrency(data.averagePrice)
    })
    
    return `${window.location.origin}/quotes?${params.toString()}`
  }
}

export default QuoteExporter
