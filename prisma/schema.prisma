// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

// NextAuth.js authentication models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Enhanced User model for authentication and profile management
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  phone         String?   @unique
  
  // Enhanced profile fields
  firstName     String?
  lastName      String?
  company       String?
  gstin         String?   // GST number for business users
  
  // Authentication
  passwordHash  String?   // For email/password authentication
  phoneVerified Boolean   @default(false)
  
  // Account settings
  role          UserRole  @default(USER)
  isActive      Boolean   @default(true)
  
  // Timestamps
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastLoginAt   DateTime?

  // Relations
  accounts      Account[]
  sessions      Session[]
  addresses     Address[]
  orders        Order[]
  
  @@map("users")
}

// User roles enum
enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

// Address model for pickup and delivery addresses
model Address {
  id           String  @id @default(cuid())
  userId       String
  type         String  // 'home', 'work', 'other'
  addressLine1 String
  addressLine2 String?
  city         String
  state        String
  pincode      String
  latitude     Float?
  longitude    Float?
  isDefault    Boolean @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  pickupOrders Order[] @relation("PickupAddress")
  deliveryOrders Order[] @relation("DeliveryAddress")
  
  @@map("addresses")
}

// Courier Partners model - Enhanced for Real API Integration
model CourierPartner {
  id            String   @id @default(cuid())
  name          String   @unique
  code          String   @unique  // "delhivery", "shiprocket", "ecom_express", "blue_dart"
  
  // API Configuration
  apiEndpoint   String?
  apiKey        String?
  authType      String?  // "bearer", "basic", "apikey", "oauth"
  isSandbox     Boolean  @default(true)
  
  // API Endpoints
  rateApiEndpoint   String?
  bookApiEndpoint   String?
  trackApiEndpoint  String?
  cancelApiEndpoint String?
  
  // Business Configuration
  pricingModel      Json?    // Store pricing configuration as JSON
  coverageAreas     Json?    // Store array of supported pincodes/cities as JSON
  isActive          Boolean  @default(true)
  rating            Float    @default(0)
  
  // Service Capabilities
  features          Json?    // ["cod", "insurance", "priority", "bulk"] - stored as JSON array
  minWeight         Float?   // Minimum weight in kg
  maxWeight         Float?   // Maximum weight in kg
  avgDeliveryDays   Int      @default(3)
  
  // Metadata
  logo              String?
  description       String?
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  orders            Order[]
  
  @@map("courier_partners")
}

// Order model for shipment bookings - Enhanced for Real Courier Integration
model Order {
  id                String    @id @default(cuid())
  userId            String
  courierPartnerId  String
  pickupAddressId   String
  deliveryAddressId String
  
  // Order details
  trackingNumber    String?   @unique
  status            String    @default("pending") // pending, confirmed, picked_up, in_transit, delivered, cancelled
  totalAmount       Float
  weight            Float
  packageType       String    // document, package, fragile, etc.
  declaredValue     Float?
  
  // Courier Integration Fields
  courierOrderId    String?   // Courier's internal order ID
  courierTrackingId String?   // Courier's tracking number
  courierStatus     String?   // Courier's status
  courierResponse   Json?     // Full API response from courier
  
  // Shipping Calculation Details
  actualWeight      Float?    // Courier calculated weight
  volumetricWeight  Float?    // Courier calculated volumetric weight
  chargedWeight     Float?    // Final chargeable weight
  serviceType       String?   // Selected service type (express, standard, etc.)
  
  // Parcel details
  parcelContents    String?
  dimensions        Json?     // {length, width, height}
  
  // Delivery details
  estimatedDelivery DateTime?
  actualDelivery    DateTime?
  deliveryInstructions String?
  
  // Enhanced Timestamps
  bookedAt          DateTime? // When actually booked with courier
  dispatchedAt      DateTime? // When picked up by courier
  deliveredAt       DateTime? // When delivered to customer
  
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  user              User            @relation(fields: [userId], references: [id])
  courierPartner    CourierPartner  @relation(fields: [courierPartnerId], references: [id])
  pickupAddress     Address         @relation("PickupAddress", fields: [pickupAddressId], references: [id])
  deliveryAddress   Address         @relation("DeliveryAddress", fields: [deliveryAddressId], references: [id])
  payments          Payment[]
  orderLogs         OrderLog[]
  trackingUpdates   OrderTracking[]
  
  @@map("orders")
}

// Payment model for transaction management
model Payment {
  id                  String        @id @default(cuid())
  orderId             String
  razorpayOrderId     String?       @unique
  razorpayPaymentId   String?       @unique
  razorpaySignature   String?
  amount              Int           // Amount in paise (Indian currency subunit)
  currency            String        @default("INR")
  status              PaymentStatus @default(PENDING)
  method              PaymentMethod?
  description         String?
  notes               String?       // JSON string for additional notes
  failureReason       String?
  gateway             String        @default("razorpay")
  gatewayRef          String?       // Gateway reference number
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  paidAt              DateTime?

  // Relations
  order               Order         @relation(fields: [orderId], references: [id])
  
  @@map("payments")
}

enum PaymentStatus {
  PENDING
  PROCESSING
  CAPTURED
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum PaymentMethod {
  CARD
  NETBANKING
  WALLET
  UPI
  EMI
}

// Order tracking model for real-time updates
model OrderTracking {
  id        String   @id @default(cuid())
  orderId   String
  status    String   // picked_up, in_transit, out_for_delivery, delivered
  location  String?  // Current location description
  latitude  Float?
  longitude Float?
  message   String?
  timestamp DateTime @default(now())
  
  // Courier API Data - Enhanced for Real Integration
  courierStatus    String?  // Raw status from courier API
  courierLocation  String?  // Location from courier API
  courierData      Json?    // Full tracking data from courier API
  description      String?  // Detailed status description
  expectedDelivery DateTime? // Expected delivery from courier
  actualDelivery   DateTime? // Actual delivery timestamp
  remarks          String?  // Additional remarks from courier

  // Relations
  order     Order    @relation(fields: [orderId], references: [id])
  
  @@unique([orderId, timestamp])
  @@map("order_tracking")
}

// Order logs for audit trail
model OrderLog {
  id        String   @id @default(cuid())
  orderId   String
  status    String
  message   String
  createdBy String?  // User ID or system
  timestamp DateTime @default(now())

  // Relations
  order     Order    @relation(fields: [orderId], references: [id])
  
  @@map("order_logs")
}

// Courier API Configuration - For Real Courier Integration
model CourierAPIConfig {
  id            String   @id @default(cuid())
  courierCode   String   @unique // delhivery, shiprocket, ecom_express, blue_dart
  courierName   String   // Display name
  
  // API Configuration
  isActive      Boolean  @default(false)
  environment   String   @default("sandbox") // sandbox, production
  
  // API Credentials (encrypted)
  apiUrl        String?  // Base API URL
  apiKey        String?  // API Key (encrypted)
  apiSecret     String?  // API Secret (encrypted)
  authToken     String?  // Auth Token (encrypted)
  clientId      String?  // Client ID
  clientSecret  String?  // Client Secret (encrypted)
  
  // API Capabilities
  capabilities  Json     @default("{}") // Available services and features
  serviceTypes  Json     @default("[]") // Available service types
  pincodeList   Json?    // Supported pincodes
  
  // Rate Limiting
  rateLimit     Int      @default(100) // Requests per minute
  
  // Configuration metadata
  configData    Json?    // Additional config parameters
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@map("courier_api_config")
}
